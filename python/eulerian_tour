# Find Eulerian Tour
#
# Write a function that takes in a graph
# represented as a list of tuples
# and return a list of nodes that
# you would follow on an Eulerian Tour
#
# For example, if the input graph was
# [(1, 2), (2, 3), (3, 1)]
# A possible Eulerian tour would be [1, 2, 3, 1]

def find_eulerian_tour(graph):
    routes = get_routes(graph)
    #print routes
    odds_list = []
    for node in routes:
        if len(routes[node]) % 2 == 1:
            odds_list.append(node)
    odds_count = len(odds_list)
    if odds_count > 2 or odds_count == 1:
        return None
    elif odds_count == 2:
        start = odds_list[0]
        end = odds_list[1]
    else:
        start = graph[0][0]
        end = start
    
    next1_preferred = 0
    try:
        while True:
            path = find_path(graph, start, end, next1_preferred)
            if path != 0:
                return path
            print "trying different path" ##
            next1_preferred += 1
    except IndexError:
            print "could not find route"    
            return None
    

def get_routes(graph):
    routes = {}
    for (x,y) in graph:
        if routes.get(x) is None:
            routes[x] = []
        if routes.get(y) is None:
            routes[y] = []
        routes[x].append(y)
        routes[y].append(x)
    return routes

# unused function
def already_crossed(x, y, A):
    if (x,y) in A or (y,x) in A:
        return True
    return False

def find_path(graph, start, end, next1_preferred):
    print start ##
    routes_count = len(graph)
    routes = get_routes(graph)
    path = []
    
    path.append(start)
    next1_preferred = routes[start][next1_preferred]
    path.append(next1_preferred)
    routes[start].remove(next1_preferred)
    routes[next1_preferred].remove(start)
    current = next1_preferred
    
    visited_count = 1
 
    end_visit_OK = False
    deadend = False
 
    while visited_count < routes_count and not deadend:
        deadend = True
        for next1 in routes[current]:
            if next1 == end and len(routes[current]) == 1:
                end_visit_OK = True
            if next1 != end or end_visit_OK:
                print current ##
                #print routes[current] ##
                #print end_visit_OK ##
                visited_count += 1
                routes[current].remove(next1)
                routes[next1].remove(current)
                current = next1
                path.append(current)
                deadend = False
                break
    if visited_count < routes_count and deadend:
        return 0
    return path
    





#print find_eulerian_tour([(1, 5), (1, 7), (4, 5),
#(4, 8), (1, 6), (3, 7), (5, 9),
#(2, 4), (0, 4), (2, 5), (3, 6), (8, 9)])

print find_eulerian_tour([(1, 13), (1, 6), (6, 11), (3, 13),
(8, 13), (0, 6), (8, 9),(5, 9), (2, 6), (6, 10), (7, 9),
(1, 12), (4, 12), (5, 14), (0, 1),  (2, 3), (4, 11), (6, 9),
(7, 14),  (10, 13)])

#print find_eulerian_tour([(8, 16), (8, 18), (16, 17), (18, 19),
#(3, 17), (13, 17), (5, 13),(3, 4), (0, 18), (3, 14), (11, 14),
#(1, 8), (1, 9), (4, 12), (2, 19),(1, 10), (7, 9), (13, 15),
#(6, 12), (0, 1), (2, 11), (3, 18), (5, 6), (7, 15), (8, 13), (10, 17)])


